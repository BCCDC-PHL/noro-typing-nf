manifest {
  author = 'John Palmer <john.palmer@bccdc.ca>'
  name = 'BCCDC-PHL/noro-typing-nf'
  version = '0.2.0'
  description = 'BCCDC-PHL Norovirus Metagenomics Pipeline'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.01.0'
}

params {
  virus_name = 'norovirus'
  profile = false
  cache = ''
  fastq_input = ''
  outdir = 'results'
  illumina_suffixes = ['*_R{1,2}_001', '*_R{1,2}', '*_{1,2}' ]
  fastq_exts = ['.fastq.gz', '.fq.gz', '.fastq', '.fq']
  fastq_search_path = makeFastqSearchPath( illumina_suffixes, fastq_exts )
  run_name = parseRunName( fastq_input )

  pipeline_short_name = parsePipelineName(manifest.toMap().get('name'))
  pipeline_minor_version = parseMinorVersion(manifest.toMap().get('version'))

  samplesheet_input = 'NO_FILE'
  versioned_outdir = false
  min_identity = 100.0
  min_coverage = 100.0
  consensus_min_depth = 10
  cache = false
  pipeline_cache = "${projectDir}/cache/"

  assemble = false

  // PRIMER TRIMMING
  primers = "${projectDir}/assets/primers.fa"
  primers_rev = "${projectDir}/assets/primers_rev.fa"

  // G1 GENE POSITIONS
  g1_gene_positions = "${projectDir}/assets/norovirus-g1-genes.yaml"

  // G1 NORWALK ANNOTATED REFERENCE
  g1_reference = "${projectDir}/assets/norovirus-g1-reference.fasta"

  // MULTIQC 
  multiqc_config = "${projectDir}/assets/multiqc_config.yaml"

  // BLASTN
  min_blast_id = 90
  min_blast_cov = 25
  header_delim = "\\|"
  header_pos_accno = 0
  header_pos_type = 1
  blast_outfmt = "qseqid sseqid pident length qlen slen qstart qend sstart send evalue bitscore score"
  blast_metrics_composite = 'bitscore,pident,prop_covered'              // options : prop_covered, bsr, bitscore, pident
  blast_metrics_global = 'bitscore,pident,prop_covered'                 // cannot be "bsr" (blast score ratio; computation is too complex)

  // KRAKEN2 PARAMS
  k2_norovirus_id = 142786
  k2_homo_sapien_id = 9606
  k2_read_filter = false

  // REQUIRED ARGUMENTS
  adapters_path = "${projectDir}/assets/adapters.fa"
  kraken2_database = ''
	human_reference_fasta = ''
	blastn_gtype_database = ''
	blastn_ptype_database = ''
	blastn_global_database = ''
}

includeConfig 'conf/vcf.config'

includeConfig 'conf/user.config'

includeConfig 'conf/modules.config'


def makeFastqSearchPath ( illumina_suffixes, fastq_exts ) {
    def fastq_search_path = []
    for (suffix in illumina_suffixes){
        for (ext in fastq_exts) {
            fastq_search_path.add(params.fastq_input.toString() + '/' + suffix.toString() + ext.toString())
        }
    }
    return fastq_search_path
}

def makeOutPath ( outdir , outpath_add_run_name){
  return outpath_add_run_name ? [outdir, params.run_name].join("/") : outdir 
}

// this uses a regex invocation using the =~ to pull out the folder name
def parseRunName ( fastq_input ) {
    run_name = (params.fastq_input =~ /([^\/]+)\/?$/)[0][1]
    if (!run_name) {                                                         
      throw new RuntimeException("ERROR: Parsing run name from FASTQ path failed.")
    }
    return run_name
}

def parseMinorVersion(version) {
    minor_version = version.split('\\.')[0..1].join('.')
    return minor_version
}

def parsePipelineName(name) {
    short_name = name.split('/')[1]
    return short_name
}

process {

    withLabel: medium {
        cpus = 4
        memory = 8.GB
    }
    withLabel: heavy {
        cpus = 8
        memory = 64.GB
    }
    withLabel: ultra {
        cpus = 16
        memory = 64.GB
    }
}

profiles {
  conda {
    process.conda = "$baseDir/environments/main.yaml"
    conda.useMamba = true
    if (params.cache) {
      conda.cacheDir = params.cache
    }
  }
}
